#'
#' To gather up **wide** data into a **long** format, we can use the `gather` function.
#' This needs us to specify the desired new columns in standardized form, and the input columns
#' to create those new ones:
#'
## ------------------------------------------------------------------------
long.price <- listings %>%
select(id, name, nprice, weekly_price, monthly_price) %>%
gather(price_type, price_value, nprice, weekly_price, monthly_price) %>%
filter(!is.na(tprice))
#' But what if we want to compare the distributions of daily, weekly, and monthly prices?
#' Now we have a similar situation to the quarterly earnings example from before: now we want
#' each row to have single price, and have one of the columns specify which kind of price we're
#' talking about.
#'
#' To gather up **wide** data into a **long** format, we can use the `gather` function.
#' This needs us to specify the desired new columns in standardized form, and the input columns
#' to create those new ones:
#'
## ------------------------------------------------------------------------
long.price <- listings %>%
select(id, name, nprice, weekly_price, monthly_price) %>%
gather(price_type, price_value, nprice, weekly_price, monthly_price) %>%
filter(!is.na(price_value))
long.price %>% head()  # take a peek
#' rows. Typically, you can use them to identify which wide row each long row corresponds to.
#'
#'
#' **Quick exercise:** What's the gather command for the quarterly earnings table above?
#' *Answer:* `gather(Quarter, Earnings, Qtr.1, Qtr.2, Qtr.3, Qtr.4)`
#'
#'
#' To spread it back out into the original wide format, we can use `spread`.
#' We tell spread the "key" and "value" columns, and it turns long data into wide data.
## ------------------------------------------------------------------------
long.price %>%
spread(price_type, price_value) %>%
head()
#' our data to a visualization.  Let's say we want the distributions of daily, weekly, and monthly
#' price, with the color of the line showing which type of price it is.  Before we were able to do
#' this with room type, because each listing had only one room type.  But with price, we would need
#' to do some brute force thing like ... `y1=price, y2=weekly_price, y3=monthly_price`?
#' And `color=` ... ?  This looks like a mess, and it's not valid ggplot commands anyway.
#'
#' But with the long format data, we can simply specify the color of our line with the `freq`
#' column, which gives which type of observation it is.
#'
## ------------------------------------------------------------------------
long.price %>%
filter(tprice < 1000) %>%
ggplot(aes(x=price_value, color=price_type)) +
stat_ecdf()
#' our data to a visualization.  Let's say we want the distributions of daily, weekly, and monthly
#' price, with the color of the line showing which type of price it is.  Before we were able to do
#' this with room type, because each listing had only one room type.  But with price, we would need
#' to do some brute force thing like ... `y1=price, y2=weekly_price, y3=monthly_price`?
#' And `color=` ... ?  This looks like a mess, and it's not valid ggplot commands anyway.
#'
#' But with the long format data, we can simply specify the color of our line with the `freq`
#' column, which gives which type of observation it is.
#'
## ------------------------------------------------------------------------
long.price %>%
filter(price_value < 1000) %>%
ggplot(aes(x=price_value, color=price_type)) +
stat_ecdf()
#'
#' There are lots of times we need this little "trick," so you should get comfortable with it
#'  --- sometimes it might even be easiest to just chain it in.
#' Let's plot a bar chart showing the counts of listings with different numbers of bedrooms
#' and bathrooms (we'll filter out half-rooms just to help clean up the plot):
#'
## ------------------------------------------------------------------------
listings %>%
select('Bedrooms'=bedrooms, 'Bathrooms'=bathrooms) %>%
gather(type, number, Bedrooms, Bathrooms) %>%
filter(!is.na(number), number %% 1 == 0) %>%
ggplot(aes(x=number, fill=type)) +
geom_bar(stat='count', position='dodge', color='black') +
labs(x='# Rooms', y='# Listings', fill='Room type')
#' ## Joining datasets
#'
#' Our last topic will be how to **join** two data frames together.
#' We'll introduce the concept with two toy data frames, then apply it to our AirBnB data.
#'
#' ### Join together, right now, over me...
#'
#' (The following example adapted from [here](https://rpubs.com/bradleyboehmke/data_wrangling).)
#' Let's say `table1` is
## ------------------------------------------------------------------------
table1 = data.frame(name=c('Paul', 'John', 'George', 'Ringo'),
instrument=c('Bass', 'Guitar', 'Guitar', 'Drums'),
stringsAsFactors=F)
table1  # take a look
#'
#' and `table2` is
## ------------------------------------------------------------------------
table2 = data.frame(name=c('John', 'George', 'Jimi', 'Ringo', 'Sting'),
member=c('yes', 'yes', 'no', 'yes', 'no'),
stringsAsFactors=F)
table2
#'
#' then we might want to join these datasets so that we have a `name`, `instrument`,
#' and `member` column, and the correct information filled in from both datasets (with NAs
#'  wherever we're missing the info).  This operation is called a `full_join` and would give us
#'   this:
#'
## ------------------------------------------------------------------------
full_join(table1, table2, by='name')
#'
#' Notice we have to specify a **key** column to join `by`, in this case `name`.
#'
#' We might also want to make sure we keep all the rows from the first table (the "left" table) but only add rows from the second ("right") table if they match existing ones from the first.  This called a `left_join` and gives us
## ------------------------------------------------------------------------
left_join(table1, table2, by='name')
#'
#' Notice we have to specify a **key** column to join `by`, in this case `name`.
#'
#' We might also want to make sure we keep all the rows from the first table
#' (the "left" table) but only add rows from the second ("right") table if they match
#' existing ones from the first.  This called a `left_join` and gives us
## ------------------------------------------------------------------------
left_join(table1, table2, by='name')
#'
#' since "Jimi" and "Sting" don't appear in the `name` column of `table1`.
#'
#' Left and full joins are both called "outer joins" (you might think of merging two
#' circles of a Venn diagram, and keeping all the non-intersecting "outer" parts).
#' However, we might want to use only rows whose key values occur in both tables (the intersecting
#' "inner" parts) --- this is called an `inner_join` and gives us
## ------------------------------------------------------------------------
inner_join(table1, table2, by='name')
#'
#' There is also `semi_join`, `anti_join`, ways to handle coercion, ways to handle different
#' column names ... we don't have time to cover all the variations here, but let's try using
#' some basic concepts on our AirBnB data.
#'
#' ### Applying joins
#'
#' Let's say we have a tidy table of the number of bathrooms and bedrooms for each listing,
#' which we get by doing
## ------------------------------------------------------------------------
rooms <- listings %>%
select(name, bathrooms, bedrooms) %>%
gather(room.type, number, bathrooms, bedrooms)
#'
#' But we may also want to look at the distribution of daily prices, which we can store as
## ------------------------------------------------------------------------
prices <- listings %>%
select(name, nprice) %>%
mutate(price = as.numeric(gsub('\\$|,', '', nprice)))
#'
#' Now, we can do a full join to add a `price` column.
## ------------------------------------------------------------------------
rooms.prices <- full_join(rooms, prices, by='name')
#'
#' This gives us a table with the number of bed/bathrooms separated out in a tidy format
#' (so it is amenable to ggplot), but also prices tacked on each row (so we can incorporate
#' that into the visualization).  Let's try a boxplot of price, by number of rooms, and use
#' facets to separate out the two different types of room.  (We will also filter out half-rooms
#' just to help clean up the plot.)
## ------------------------------------------------------------------------
rooms.prices %>%
filter(!is.na(number), number %% 1 == 0) %>%
mutate(number = as.factor(number)) %>%
ggplot(aes(x=number, y=price, fill=room.type)) +
geom_boxplot() +
facet_grid(~room.type) +
labs(x='# of Rooms', y='Daily price', fill='Room type')
#' In the next sessions, we will need data from the `listings.csv` file and the other datasets
#' `calendar.csv` and `reviews.csv`, so we will use these joins again.
#'
#' # `tidyr` Exercises
#'
#' Make a bar chart showing the mean review score for each neighborhood and for each type of
#' review: `review_scores_cleanliness`, `review_scores_location`, `review_scores_value`.
#'
#' *ANSWER:*
## ------------------------------------------------------------------------
listings %>%
gather(rating_type, rating, review_scores_cleanliness, review_scores_location, review_scores_value) %>%
group_by(neighbourhood_cleansed, rating_type) %>%
summarise(mean_rating = mean(rating, na.rm=TRUE)) %>%
ggplot(aes(neighbourhood_cleansed, mean_rating, fill=rating_type)) +
geom_bar(stat='identity', position='dodge') +
theme(axis.text.x=element_text(angle=60, hjust=1))
#' Spatial data has become much easier to work with in R in recent years, thanks to some new packages. Here, we'll work with two of the most powerful:
#'
#' - `sf`: Tidyverse-compatible tools for loading and manipulating spatial data.
#' - `leaflet`: Easy interactive maps via the Javascript library Leaflet.
#'
#' Let's say we want to plot average listing prices by zip code.
#'
#' First, let's grab some zip code shapes from [Analyze Boston](http://bostonopendata-boston.opendata.arcgis.com/datasets/53ea466a189b4f43b3dfb7b38fa7f3b6_1). Unzip this in your working directory and load it into a dataframe:
#'
## ------------------------------------------------------------------------
library(sf)
library(leaflet)
shp <- read_sf('shape/ZIP_Codes.shp')
#' Spatial data has become much easier to work with in R in recent years, thanks to some new packages. Here, we'll work with two of the most powerful:
#'
#' - `sf`: Tidyverse-compatible tools for loading and manipulating spatial data.
#' - `leaflet`: Easy interactive maps via the Javascript library Leaflet.
#'
#' Let's say we want to plot average listing prices by zip code.
#'
#' First, let's grab some zip code shapes from [Analyze Boston](http://bostonopendata-boston.opendata.arcgis.com/datasets/53ea466a189b4f43b3dfb7b38fa7f3b6_1). Unzip this in your working directory and load it into a dataframe:
#'
## ------------------------------------------------------------------------
library(sf)
library(leaflet)
shp <- read_sf('ZIP_Codes.shp')
shp <- read_sf('ZIP_Codes.shp')
#'
#' Here, `shp` is an sf ("simple features") dataframe. You can manipulate it using the usual dplyr operations; it just has a column containing a special "geometry" column that has the geometry (point, line, polygon, etc.) corresponding to each row.
#'
#' Next, let's grab the relevant information from the listings data and turn it into dataframe:
#'
## ------------------------------------------------------------------------
listing_geos <- listings %>%
select(price, longitude, latitude) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = st_crs(shp))
#'
#' ## Basic exploration and cleaning
#'
#' Remember to *set the working directory* to the folder with the data folder
#' in it (one easy to do this is in the Files tab using the "More" drop-down menu).  Then, in a fresh
#' script (or following along in the class script), type and execute:
#'
## Let's load up the AirBnB data.
raw_listings <- read.csv('../data/listings.csv')
#' We can look in Environment and see there's actually 3,585 rows of 95 variables.
#'
#'
#' Let's get a clearer idea of what the data encompass.
#' The 'str' command displays the structure of an object:
str(raw_listings)
#' The 'summary' command gives summary statistics
summary(raw_listings)
#' The 'colnames' command displays just column names
colnames(raw_listings)
#' Now that we have a better idea of the structure of our data, we can `select` a specific column,
#' and looking at the first few rows of that column:
#' The `head` command prints out the first parts of a vector, matrix, table, etc.
##
head(select(raw_listings, price))
#'
#' Instead of nesting our code like that, we can use a nifty operator included with tidyr
#' called the **chaining operator** which looks like `%>%` and
#' serves like a pipeline from one function to another. Specifically: `x %>% f == f(x)`.
#'
#' The chaining operator feeds in the object on its left as the first argument
#' into the function on its right.
#'
raw_listings %>% select(price) %>% head()
#' A useful command is `table`, which quickly cross-tabulate counts of different variables.
#' So if we want to see the count of how many listings are listed under each room type:
#'
table(raw_listings$room_type)
#' We can even make one of the arguments a "conditional," meaning a statement that can be
#' answered by "true" or "false", like the count of rooms by type that accommodate >= 4 people:
table(raw_listings$room_type, raw_listings$accommodates >= 4)
#' The 'function()' command allows us to create a function as an R object
#'
#' 'gsub' replaces all occurences of a pattern with a new pattern
#'
#' The blackslash \ helps us escape special behavior
#'
#' Now we replace all dollar signs in the price with space:
#'
clean_price <- function(price) as.numeric(gsub('\\$|,', '', price))
#' The `mutate` command allows us to add new variables (and thus new columns) to data, often by referring to existing ones.
#'
raw_listings %>%
mutate(nprice = clean_price(price)) %>%
select(name, price, nprice) %>%
head()
#' We can also `arrange` this info (sort it) to see the lowest- or highest-priced listings:
#'
## ------------------------------------------------------------------------
raw_listings %>%
mutate(nprice = clean_price(price)) %>%
select(name, price, nprice) %>%
arrange(nprice) %>%
head()
#' ## Loading the libraries
#'
#' If you did the homework, you already have the libraries we need
#' installed, but if not, install them with: `install.packages('tidyr')`
#' and `install.packages('dplyr')`.
#'
#' Now that we have the libraries installed, we'll load them into our current R session by calling:
#'
## ----message=FALSE-------------------------------------------------------
library(tidyr)
library(dplyr)
#'
#' ## Basic exploration and cleaning
#'
#' Remember to *set the working directory* to the folder with the data folder
#' in it (one easy to do this is in the Files tab using the "More" drop-down menu).  Then, in a fresh
#' script (or following along in the class script), type and execute:
#'
## Let's load up the AirBnB data.
raw_listings <- read.csv('../data/listings.csv')
#' We can look in Environment and see there's actually 3,585 rows of 95 variables.
#'
#'
#' Let's get a clearer idea of what the data encompass.
#' The 'str' command displays the structure of an object:
str(raw_listings)
#' The 'summary' command gives summary statistics
summary(raw_listings)
#' The 'colnames' command displays just column names
colnames(raw_listings)
#' Now that we have a better idea of the structure of our data, we can `select` a specific column,
#' and looking at the first few rows of that column:
#' The `head` command prints out the first parts of a vector, matrix, table, etc.
##
head(select(raw_listings, price))
#'
#' Instead of nesting our code like that, we can use a nifty operator included with tidyr
#' called the **chaining operator** which looks like `%>%` and
#' serves like a pipeline from one function to another. Specifically: `x %>% f == f(x)`.
#'
#' The chaining operator feeds in the object on its left as the first argument
#' into the function on its right.
#'
raw_listings %>% select(price) %>% head()
#' A useful command is `table`, which quickly cross-tabulate counts of different variables.
#' So if we want to see the count of how many listings are listed under each room type:
#'
table(raw_listings$room_type)
#' We can even make one of the arguments a "conditional," meaning a statement that can be
#' answered by "true" or "false", like the count of rooms by type that accommodate >= 4 people:
table(raw_listings$room_type, raw_listings$accommodates >= 4)
#' The 'function()' command allows us to create a function as an R object
#'
#' 'gsub' replaces all occurences of a pattern with a new pattern
#'
#' The blackslash \ helps us escape special behavior
#'
#' Now we replace all dollar signs in the price with space:
#'
clean_price <- function(price) as.numeric(gsub('\\$|,', '', price))
#' The `mutate` command allows us to add new variables (and thus new columns) to data, often by referring to existing ones.
#'
raw_listings %>%
mutate(nprice = clean_price(price)) %>%
select(name, price, nprice) %>%
head()
#' We can also `arrange` this info (sort it) to see the lowest- or highest-priced listings:
#'
## ------------------------------------------------------------------------
raw_listings %>%
mutate(nprice = clean_price(price)) %>%
select(name, price, nprice) %>%
arrange(nprice) %>%
head()
raw_listings %>%
mutate(nprice=clean_price(price))%>%
select(name, price, nprice) %>%
arrange(desc(nprice)) %>%
head()
#'
#'
#' Note that the tidyverse packages generally do not change the dataframe objects they act on.
#' For example, the code above doesn't change `raw_listings`, but instead returns a new dataframe
#' that has the same data as `raw_listings`, plus an extra column.
#'
# Let's make a new variable that will have the numeric version of price in it:
raw_listings$numericprice = as.numeric(gsub('\\$|,', '', raw_listings$price))
#' Now let's try again to see the distribution of prices:
hist(raw_listings$numericprice)
#'
# The plot is not ideal, but at least it worked. Let's try drawing a scatter plot of price vs. reviews:
plot(raw_listings$review_scores_rating, raw_listings$nprice)
#'
#' Now, let's learn some more verbs. Let's say we're interested in understanding the relationship
#'  between bedrooms and price. But some of the listings don't have data on bathrooms;
#'  The `is.na()` function returns "True" if something is `NA`, so `!is.na()` (read: "*not* is NA")
#'  returns the opposite.
#'  The 'count' command helps us count how many NA there are in a column.
#'
## ------------------------------------------------------------------------
raw_listings %>% count(is.na(bathrooms))
#'
#' Let's filter these out:
#'
## ------------------------------------------------------------------------
raw_listings %>% filter(!is.na(bathrooms)) %>% head()
listings <- raw_listings %>%
filter(!is.na(bedrooms), !is.na(bathrooms)) %>%
mutate(nprice = clean_price(price),
weekly_price = clean_price(weekly_price),
monthly_price = clean_price(monthly_price))
#' Spatial data has become much easier to work with in R in recent years, thanks to some new packages. Here, we'll work with two of the most powerful:
#'
#' - `sf`: Tidyverse-compatible tools for loading and manipulating spatial data.
#' - `leaflet`: Easy interactive maps via the Javascript library Leaflet.
#'
#' Let's say we want to plot average listing prices by zip code.
#'
#' First, let's grab some zip code shapes from [Analyze Boston](http://bostonopendata-boston.opendata.arcgis.com/datasets/53ea466a189b4f43b3dfb7b38fa7f3b6_1). Unzip this in your working directory and load it into a dataframe:
#'
## ------------------------------------------------------------------------
library(sf)
library(leaflet)
shp <- read_sf('ZIP_Codes.shp')
#'
#' Here, `shp` is an sf ("simple features") dataframe. You can manipulate it using the usual dplyr
#'  operations; it just has a column containing a special "geometry" column that has the geometry
#'  (point, line, polygon, etc.) corresponding to each row.
#'
#' Next, let's grab the relevant information from the listings data and turn it into dataframe:
#'
## ------------------------------------------------------------------------
listing_geos <- listings %>%
select(price, longitude, latitude) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = st_crs(shp))
#'
#' Note: the `crs` argument sets the coordinate system of our new spatial dataframe. Since we're
#' going to join it with `shp`, we want their coordinate systems to be the same.
#'
#' Let's join these two and aggregate the dataframes. The `join` argument tells `st_join` how to
#' match shapes. In this case, we join a shape from `shp` with a point in `listing_geos` if the
#' shape contains the point.
#'
## ------------------------------------------------------------------------
by.zip <- st_join(shp, listing_geos, join = st_contains) %>%
group_by(ZIP5) %>%
summarise(price = mean(price, na.rm = TRUE))
#'
#' Here, `shp` is an sf ("simple features") dataframe. You can manipulate it using the usual dplyr
#'  operations; it just has a column containing a special "geometry" column that has the geometry
#'  (point, line, polygon, etc.) corresponding to each row.
#'
#' Next, let's grab the relevant information from the listings data and turn it into dataframe:
#'
## ------------------------------------------------------------------------
listing_geos <- listings %>%
select(nprice, longitude, latitude) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = st_crs(shp))
#'
#' Note: the `crs` argument sets the coordinate system of our new spatial dataframe. Since we're
#' going to join it with `shp`, we want their coordinate systems to be the same.
#'
#' Let's join these two and aggregate the dataframes. The `join` argument tells `st_join` how to
#' match shapes. In this case, we join a shape from `shp` with a point in `listing_geos` if the
#' shape contains the point.
#'
## ------------------------------------------------------------------------
by.zip <- st_join(shp, listing_geos, join = st_contains) %>%
group_by(ZIP5) %>%
summarise(price = mean(price, na.rm = TRUE))
#'
#' Note: the `crs` argument sets the coordinate system of our new spatial dataframe. Since we're
#' going to join it with `shp`, we want their coordinate systems to be the same.
#'
#' Let's join these two and aggregate the dataframes. The `join` argument tells `st_join` how to
#' match shapes. In this case, we join a shape from `shp` with a point in `listing_geos` if the
#' shape contains the point.
#'
## ------------------------------------------------------------------------
by.zip <- st_join(shp, listing_geos, join = st_contains) %>%
group_by(ZIP5) %>%
summarise(price = mean(nprice, na.rm = TRUE))
#'
#' Here, `shp` is an sf ("simple features") dataframe. You can manipulate it using the usual dplyr
#'  operations; it just has a column containing a special "geometry" column that has the geometry
#'  (point, line, polygon, etc.) corresponding to each row.
#'
#' Next, let's grab the relevant information from the listings data and turn it into dataframe:
#'
## ------------------------------------------------------------------------
listing_geos <- listings %>%
select(nprice, longitude, latitude) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = st_crs(shp))
#'
#' Note: the `crs` argument sets the coordinate system of our new spatial dataframe. Since we're
#' going to join it with `shp`, we want their coordinate systems to be the same.
#'
#' Let's join these two and aggregate the dataframes. The `join` argument tells `st_join` how to
#' match shapes. In this case, we join a shape from `shp` with a point in `listing_geos` if the
#' shape contains the point.
#'
## ------------------------------------------------------------------------
by.zip <- st_join(shp, listing_geos, join = st_contains) %>%
group_by(ZIP5) %>%
summarise(price = mean(nprice, na.rm = TRUE))
#'
#' Finally, we plot the map with leaflet:
#'
## ------------------------------------------------------------------------
leaflet(by.zip) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(weight = 1,
fillColor = ~colorNumeric("YlOrRd", domain = price)(price),
popup = ~as.character(price))
#' Spatial data has become much easier to work with in R in recent years, thanks to some new packages. Here, we'll work with two of the most powerful:
#'
#' - `sf`: Tidyverse-compatible tools for loading and manipulating spatial data.
#' - `leaflet`: Easy interactive maps via the Javascript library Leaflet.
#'
#' Let's say we want to plot average listing prices by zip code.
#'
#' First, let's grab some zip code shapes from [Analyze Boston](http://bostonopendata-boston.opendata.arcgis.com/datasets/53ea466a189b4f43b3dfb7b38fa7f3b6_1). Unzip this in your working directory and load it into a dataframe:
#'
## ------------------------------------------------------------------------
library(sf)
library(leaflet)
shp <- read_sf('ZIP_Codes.shp')
